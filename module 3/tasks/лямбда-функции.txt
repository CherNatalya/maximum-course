lambda-функции (безымянные функции) – функции, которые не имеют названия и используются в коде единожды, то есть не требуют постоянного вызова в разных точках кода. С помощью лямбда функций можно сократить кол-во строчек кода.
Допустим:
print (sorted(goods, key=lambda item: item['price'])) - Сортировка списка, который состоит из словарей по ключу price

1)Функция filter
Представим ситуацию, что нам необходимо отобрать из нашего списка только товары бренда Apple. Для этого, конечно, мы можем воспользоваться циклом, но это трата времени, есть гораздо более лаконичное и верное решение – использование встроенной функции filter.
Допустим:
apple_list = filter(lambda item: item['brand'] == 'Apple', goods) - Фильтрация списка, который состоит из словарей, по бренду «Apple».
Функция filter принимает два параметра – условие фильтрации и итерируемую коллекцию по которой будет происходить фильтрация элементов в ней.

2)Функция map
Представим, что мы стали жертвой не очень продуманного API и нам пришёл список, состоящий из чисел, но все эти числа представлены как строки. Нам необходимо превратить все эти строки в числа. Конечно, мы можем написать цикл и решить эту задачу, но это уже не наш уровень. Для решения данной проблемы воспользуемся функцией map:
Допустим:
numbers_list = map(int, numbers_list)
Функция map позволяет применять какую-либо функцию к каждому элементу итерируемой коллекции, при этом кол-во итерируемых объектов не ограничено.

3)Функция enumerate
Функция enumerate используется в циклах, когда помимо элемента списка, нам необходимо также получить его индекс. Функция возвращает кортеж вида (индекс, элемент).
Допустим:
for i, item in enumerate (goods):
	indexed goods.append({i: item))

4)Функция zip
Функция zip используется в циклах, когда нам необходимо одновременно перебирать элементы сразу несколько итерируемых объектов за раз. Функция принимает неограниченное кол-во элементов.
Допустим:
for name, surname in zip(names_list, surnames_list):
	print(name, surname)